{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2022-06-21T14:21:21.820Z",
    "end": "2022-06-21T14:21:22.248Z",
    "duration": 428,
    "testsRegistered": 13,
    "passPercent": 38.46153846153847,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 7,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "f512e4d0-4edb-40f6-b00f-d7274445d9a6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f70306a1-1faa-42a2-b6cc-c39a5d75752e",
          "title": "Creating Users in MongoDB",
          "fullFile": "E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test\\1-create-user.js",
          "file": "\\test\\1-create-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It will success creates the 1st user, with status 201, user count = 1, return name = 'Sudoer'",
              "fullTitle": "Creating Users in MongoDB It will success creates the 1st user, with status 201, user count = 1, return name = 'Sudoer'",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post(\"/users\")\n    .send(newUser)                      //name = Sudoer\n    .end((err, res) => {\n        res.should.have.status(201)\n        res.body.user.name.should.eql('Sudoer')\n        countUser((count) => {\n            count.should.eql(1)         //user count = 1\n            done()\n        })\n    })",
              "err": {},
              "uuid": "c4212dd1-289e-427b-89d9-1481df22f7e2",
              "parentUUID": "f70306a1-1faa-42a2-b6cc-c39a5d75752e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail creates a new user because the user' email exists, and user count = 1, status 400",
              "fullTitle": "Creating Users in MongoDB It will fail creates a new user because the user' email exists, and user count = 1, status 400",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post(\"/users\")\n    .send(newUser)      \n    .end((err, res) => {\n        res.should.have.status(400)\n        countUser((count) => {\n            count.should.eql(1)         //user count = 1\n            done()\n        })\n    })",
              "err": {},
              "uuid": "df442db1-9b05-434d-8be3-cbab6f5b218b",
              "parentUUID": "f70306a1-1faa-42a2-b6cc-c39a5d75752e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will success creates the 2nd user, and user count = 2, status 201, return name='Harry'",
              "fullTitle": "Creating Users in MongoDB It will success creates the 2nd user, and user count = 2, status 201, return name='Harry'",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post(\"/users\")\n    .send(newUser1)                     //name = Harry\n    .end((err, res) => {\n        res.should.have.status(201)\n        res.body.user.name.should.eql('Harry')\n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "85b14944-d0da-4845-b2bc-86a17b3ce143",
              "parentUUID": "f70306a1-1faa-42a2-b6cc-c39a5d75752e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail because lack of password field, and user count = 2, status 400, message: Path 'password' is required",
              "fullTitle": "Creating Users in MongoDB It will fail because lack of password field, and user count = 2, status 400, message: Path 'password' is required",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post(\"/users\")\n    .send(newUser2)\n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.errors.password.message.should.eql(\"Path `password` is required.\")\n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "87ab9f89-64a6-4c3c-8a97-72252007a64c",
              "parentUUID": "f70306a1-1faa-42a2-b6cc-c39a5d75752e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4212dd1-289e-427b-89d9-1481df22f7e2",
            "df442db1-9b05-434d-8be3-cbab6f5b218b",
            "85b14944-d0da-4845-b2bc-86a17b3ce143",
            "87ab9f89-64a6-4c3c-8a97-72252007a64c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 316,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "49a3702a-da1b-4fc0-b3bd-15cf440c2786",
          "title": "Get Users in MongoDB",
          "fullFile": "E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test\\2-view-user.js",
          "file": "\\test\\2-view-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It will success get all the users, with status 200, respone will be an array, user count = array length = 2",
              "fullTitle": "Get Users in MongoDB It will success get all the users, with status 200, respone will be an array, user count = array length = 2",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get(\"/users/all\")\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.should.be.a('array')\n        countUser((count) => {\n            count.should.eql(res.body.length)           //  user count == array length ?\n            done()\n        })\n    })",
              "err": {},
              "uuid": "117c509d-5fbf-41c9-ae43-fb43b182800a",
              "parentUUID": "49a3702a-da1b-4fc0-b3bd-15cf440c2786",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will success get a the user name \"Harry\", with status 200, response body object have name \"Harry\"",
              "fullTitle": "Get Users in MongoDB It will success get a the user name \"Harry\", with status 200, response body object have name \"Harry\"",
              "timedOut": false,
              "duration": 27,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get(\"/users/Harry\")\n    .end((err, res) => {\n        res.should.have.status(2000)\n        res.body.name.should.eql('Harry')\n        done()\n    })",
              "err": {
                "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 2000 but got 200",
                "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 2000 but got 200\n    at E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test\\2-view-user.js:34:33\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:716:12)\n    at E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\node_modules\\superagent\\lib\\node\\index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at IncomingMessage.emit (node:events:539:35)\n    at endReadableNT (node:internal/streams/readable:1345:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                "diff": "- 200\n+ 2000\n"
              },
              "uuid": "d761324e-f720-4c84-8bca-f5b1a37fec67",
              "parentUUID": "49a3702a-da1b-4fc0-b3bd-15cf440c2786",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail to get a the user name \"Peter\", with status 404, response body is an object {} with error message \"User not found\"",
              "fullTitle": "Get Users in MongoDB It will fail to get a the user name \"Peter\", with status 404, response body is an object {} with error message \"User not found\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get(\"/users/Peter\")\n    .end((err, res) => {\n        res.should.have.status(404)\n        res.body.error.should.eql(\"User not found\")\n        done()\n    })",
              "err": {},
              "uuid": "2f700deb-ca08-4cdd-ae32-03e03ecff875",
              "parentUUID": "49a3702a-da1b-4fc0-b3bd-15cf440c2786",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [
            "117c509d-5fbf-41c9-ae43-fb43b182800a"
          ],
          "failures": [
            "d761324e-f720-4c84-8bca-f5b1a37fec67"
          ],
          "pending": [],
          "skipped": [
            "2f700deb-ca08-4cdd-ae32-03e03ecff875"
          ],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "d62d33ee-aeb1-4c81-9131-0eaae5021c01",
          "title": "Updating Users in MongoDB",
          "fullFile": "E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test\\3-update-user.js",
          "file": "\\test\\3-update-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It will success update the user \"Harry\" to \"Mike\" with age=30 , with status 200, user count = 2",
              "fullTitle": "Updating Users in MongoDB It will success update the user \"Harry\" to \"Mike\" with age=30 , with status 200, user count = 2",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .patch(\"/users/Harry\")\n    .send(newUpdate)                      //name = Mike\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.name.should.eql('Mike')    //Harry -> Mike\n        res.body.age.should.eql(30)         // 18 -> 30\n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "9c3a4d6a-485e-49a7-9987-bafa4661e3dd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "It will fail to update the user because invalid input (phone) , with status 400, user count = 2, respone an object with error \"Invalid updates",
              "fullTitle": "Updating Users in MongoDB It will fail to update the user because invalid input (phone) , with status 400, user count = 2, respone an object with error \"Invalid updates",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .patch(\"/users/Sudoer\")\n    .send(failUpate)                      \n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.error.should.eql('Invalid updates')    \n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "90ccedc0-33a9-4c4d-a94a-170a01de70a0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "It will fail to update because the updated email already existed , with status 400, user count = 2, respone an object with codename \"DuplicateKey\"",
              "fullTitle": "Updating Users in MongoDB It will fail to update because the updated email already existed , with status 400, user count = 2, respone an object with codename \"DuplicateKey\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .patch(\"/users/Sudoer\")\n    .send({email:\"harry@com.vn\"})                      \n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.codeName.should.eql('DuplicateKey')  \n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "e3ebf581-5ec8-4d5b-85d9-6f04429ccaaa",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "It will fail to update because user name (Mopp) not found , with status 404, user count = 2, respone an object with error \"User not found\"",
              "fullTitle": "Updating Users in MongoDB It will fail to update because user name (Mopp) not found , with status 404, user count = 2, respone an object with error \"User not found\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .patch(\"/users/Mopp\")\n    .send(newUpdate)                      \n    .end((err, res) => {\n        res.should.have.status(404)\n        res.body.error.should.eql('User not found')  \n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "ced79889-0e9c-4cb5-9889-0dd25a0de272",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9c3a4d6a-485e-49a7-9987-bafa4661e3dd",
            "90ccedc0-33a9-4c4d-a94a-170a01de70a0",
            "e3ebf581-5ec8-4d5b-85d9-6f04429ccaaa",
            "ced79889-0e9c-4cb5-9889-0dd25a0de272"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "4628de2c-227d-4c5f-b8f5-0a353f16ad25",
          "title": "Delete Users in MongoDB",
          "fullFile": "E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test\\4-delete-user.js",
          "file": "\\test\\4-delete-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It will fail delete because not found user name \"Mopp\" , with status 404, response body is an object with error message \"User not found\", user count = 2",
              "fullTitle": "Delete Users in MongoDB It will fail delete because not found user name \"Mopp\" , with status 404, response body is an object with error message \"User not found\", user count = 2",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .delete(\"/users/Mopp\")\n    .end((err, res) => {\n        res.should.have.status(404)\n        res.body.should.be.a('object')\n        res.body.error.should.eql(\"User not found\")\n        countUser((count) => {\n            count.should.eql(2)           \n            done()\n        })\n    })",
              "err": {},
              "uuid": "1b46e712-6f25-40b8-82b0-6496881f447f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "It will success delete an user with name \"Mike\", with status 200, respone will be an object contain user whose name \"Mike\", user count = 1",
              "fullTitle": "Delete Users in MongoDB It will success delete an user with name \"Mike\", with status 200, respone will be an object contain user whose name \"Mike\", user count = 1",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .delete(\"/users/Mike\")\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.should.be.a('object')\n        res.body.name.should.eql('Mike')\n        countUser((count) => {\n            count.should.eql(1)           \n            done()\n        })\n    })",
              "err": {},
              "uuid": "916af18c-a6de-42f0-a869-55e950a4d1fc",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "1b46e712-6f25-40b8-82b0-6496881f447f",
            "916af18c-a6de-42f0-a869-55e950a4d1fc"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}