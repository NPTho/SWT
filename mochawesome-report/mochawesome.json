{
  "stats": {
    "suites": 4,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-21T17:35:20.770Z",
    "end": "2022-06-21T17:35:21.039Z",
    "duration": 269,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "05a492b4-e019-40ad-87d1-3f8ad1b6b2f3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eabdf31f-d413-4a28-b21c-4a6219684ff3",
          "title": "Creating Users in MongoDB",
          "fullFile": "E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test1\\1-create-user.js",
          "file": "\\test1\\1-create-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It will success creates the 1st user, with status 201, user count = 1, return name = 'Sudoer'",
              "fullTitle": "Creating Users in MongoDB It will success creates the 1st user, with status 201, user count = 1, return name = 'Sudoer'",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post(\"/users\")\n    .send(newUser)                      //name = Sudoer\n    .end((err, res) => {\n        res.should.have.status(201)\n        res.body.user.name.should.eql('Sudoer')\n        countUser((count) => {\n            count.should.eql(1)         //user count = 1\n            done()\n        })\n    })",
              "err": {},
              "uuid": "ffc56935-95e0-49c8-a880-5d830074a84a",
              "parentUUID": "eabdf31f-d413-4a28-b21c-4a6219684ff3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail creates a new user because the user' email exists, and user count = 1, status 400",
              "fullTitle": "Creating Users in MongoDB It will fail creates a new user because the user' email exists, and user count = 1, status 400",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post(\"/users\")\n    .send(newUser)      \n    .end((err, res) => {\n        res.should.have.status(400)\n        countUser((count) => {\n            count.should.eql(1)         //user count = 1\n            done()\n        })\n    })",
              "err": {},
              "uuid": "8eda3821-fd18-45a4-85b2-772092b9d47d",
              "parentUUID": "eabdf31f-d413-4a28-b21c-4a6219684ff3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will success creates the 2nd user, and user count = 2, status 201, return name='Harry'",
              "fullTitle": "Creating Users in MongoDB It will success creates the 2nd user, and user count = 2, status 201, return name='Harry'",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post(\"/users\")\n    .send(newUser1)                     //name = Harry\n    .end((err, res) => {\n        res.should.have.status(201)\n        res.body.user.name.should.eql('Harry')\n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "8033a25c-911c-462d-a51c-0924e744d0c5",
              "parentUUID": "eabdf31f-d413-4a28-b21c-4a6219684ff3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail because lack of password field, and user count = 2, status 400, message: Path 'password' is required",
              "fullTitle": "Creating Users in MongoDB It will fail because lack of password field, and user count = 2, status 400, message: Path 'password' is required",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post(\"/users\")\n    .send(newUser2)\n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.errors.password.message.should.eql(\"Path `password` is required.\")\n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "b3d9fc45-65dc-4bff-a8aa-81d1d6db3404",
              "parentUUID": "eabdf31f-d413-4a28-b21c-4a6219684ff3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffc56935-95e0-49c8-a880-5d830074a84a",
            "8eda3821-fd18-45a4-85b2-772092b9d47d",
            "8033a25c-911c-462d-a51c-0924e744d0c5",
            "b3d9fc45-65dc-4bff-a8aa-81d1d6db3404"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 173,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "498dc46b-82ca-4765-af8a-89932287b57e",
          "title": "Get Users in MongoDB",
          "fullFile": "E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test1\\2-view-user.js",
          "file": "\\test1\\2-view-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It will success get all the users, with status 200, respone will be an array, user count = array length = 2",
              "fullTitle": "Get Users in MongoDB It will success get all the users, with status 200, respone will be an array, user count = array length = 2",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get(\"/users/all\")\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.should.be.a('array')\n        countUser((count) => {\n            count.should.eql(res.body.length)           //  user count == array length ?\n            done()\n        })\n    })",
              "err": {},
              "uuid": "f93a9bfe-78a4-423d-9527-9ef694de8927",
              "parentUUID": "498dc46b-82ca-4765-af8a-89932287b57e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will success get a the user name \"Harry\", with status 200, response body object have name \"Harry\"",
              "fullTitle": "Get Users in MongoDB It will success get a the user name \"Harry\", with status 200, response body object have name \"Harry\"",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get(\"/users/Harry\")\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.name.should.eql('Harry')\n        done()\n    })",
              "err": {},
              "uuid": "a4c6cada-5a5a-4335-9140-03f8f8f5126c",
              "parentUUID": "498dc46b-82ca-4765-af8a-89932287b57e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail to get a the user name \"Peter\", with status 404, response body is an object {} with error message \"User not found\"",
              "fullTitle": "Get Users in MongoDB It will fail to get a the user name \"Peter\", with status 404, response body is an object {} with error message \"User not found\"",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get(\"/users/Peter\")\n    .end((err, res) => {\n        res.should.have.status(404)\n        res.body.error.should.eql(\"User not found\")\n        done()\n    })",
              "err": {},
              "uuid": "944e4c88-f6da-441f-ac1e-69990946beb0",
              "parentUUID": "498dc46b-82ca-4765-af8a-89932287b57e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f93a9bfe-78a4-423d-9527-9ef694de8927",
            "a4c6cada-5a5a-4335-9140-03f8f8f5126c",
            "944e4c88-f6da-441f-ac1e-69990946beb0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "be9e7311-f3ba-4179-aab5-af1c02efd88a",
          "title": "Updating Users in MongoDB",
          "fullFile": "E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test1\\3-update-user.js",
          "file": "\\test1\\3-update-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It will success update the user \"Harry\" to \"Mike\" with age=30 , with status 200, user count = 2",
              "fullTitle": "Updating Users in MongoDB It will success update the user \"Harry\" to \"Mike\" with age=30 , with status 200, user count = 2",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .patch(\"/users/Harry\")\n    .send(newUpdate)                      //name = Mike\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.name.should.eql('Mike')    //Harry -> Mike\n        res.body.age.should.eql(30)         // 18 -> 30\n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "c4e5dd23-9614-44d5-abd1-a036a3e20d9e",
              "parentUUID": "be9e7311-f3ba-4179-aab5-af1c02efd88a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail to update the user because invalid input (phone) , with status 400, user count = 2, respone an object with error \"Invalid updates",
              "fullTitle": "Updating Users in MongoDB It will fail to update the user because invalid input (phone) , with status 400, user count = 2, respone an object with error \"Invalid updates",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .patch(\"/users/Sudoer\")\n    .send(failUpate)                      \n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.error.should.eql('Invalid updates')    \n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "3d82da7c-cc8d-425e-a4b3-acaac0f55d4c",
              "parentUUID": "be9e7311-f3ba-4179-aab5-af1c02efd88a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail to update because the updated email already existed , with status 400, user count = 2, respone an object with codename \"DuplicateKey\"",
              "fullTitle": "Updating Users in MongoDB It will fail to update because the updated email already existed , with status 400, user count = 2, respone an object with codename \"DuplicateKey\"",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .patch(\"/users/Sudoer\")\n    .send({email:\"harry@com.vn\"})                      \n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.codeName.should.eql('DuplicateKey')  \n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "f278f08a-10fb-4e78-9e6e-f414a4dcfeb6",
              "parentUUID": "be9e7311-f3ba-4179-aab5-af1c02efd88a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will fail to update because user name (Mopp) not found , with status 404, user count = 2, respone an object with error \"User not found\"",
              "fullTitle": "Updating Users in MongoDB It will fail to update because user name (Mopp) not found , with status 404, user count = 2, respone an object with error \"User not found\"",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .patch(\"/users/Mopp\")\n    .send(newUpdate)                      \n    .end((err, res) => {\n        res.should.have.status(404)\n        res.body.error.should.eql('User not found')  \n        countUser((count) => {\n            count.should.eql(2)         //user count = 2\n            done()\n        })\n    })",
              "err": {},
              "uuid": "0ec1cb0a-9655-4556-ae81-7d29225b2064",
              "parentUUID": "be9e7311-f3ba-4179-aab5-af1c02efd88a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4e5dd23-9614-44d5-abd1-a036a3e20d9e",
            "3d82da7c-cc8d-425e-a4b3-acaac0f55d4c",
            "f278f08a-10fb-4e78-9e6e-f414a4dcfeb6",
            "0ec1cb0a-9655-4556-ae81-7d29225b2064"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "94561535-111d-435f-be31-6381e6ec407a",
          "title": "Delete Users in MongoDB",
          "fullFile": "E:\\SE150052\\5_Summer2022\\SWT301\\show-code\\task-manager\\test1\\4-delete-user.js",
          "file": "\\test1\\4-delete-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It will fail delete because not found user name \"Mopp\" , with status 404, response body is an object with error message \"User not found\", user count = 2",
              "fullTitle": "Delete Users in MongoDB It will fail delete because not found user name \"Mopp\" , with status 404, response body is an object with error message \"User not found\", user count = 2",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .delete(\"/users/Mopp\")\n    .end((err, res) => {\n        res.should.have.status(404)\n        res.body.should.be.a('object')\n        res.body.error.should.eql(\"User not found\")\n        countUser((count) => {\n            count.should.eql(2)           \n            done()\n        })\n    })",
              "err": {},
              "uuid": "f56d3e13-c903-47e8-8923-114c88594cd6",
              "parentUUID": "94561535-111d-435f-be31-6381e6ec407a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It will success delete an user with name \"Mike\", with status 200, respone will be an object contain user whose name \"Mike\", user count = 1",
              "fullTitle": "Delete Users in MongoDB It will success delete an user with name \"Mike\", with status 200, respone will be an object contain user whose name \"Mike\", user count = 1",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .delete(\"/users/Mike\")\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.should.be.a('object')\n        res.body.name.should.eql('Mike')\n        countUser((count) => {\n            count.should.eql(1)           \n            done()\n        })\n    })",
              "err": {},
              "uuid": "23ac09cf-4261-4120-adaa-e7c296b01fa9",
              "parentUUID": "94561535-111d-435f-be31-6381e6ec407a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f56d3e13-c903-47e8-8923-114c88594cd6",
            "23ac09cf-4261-4120-adaa-e7c296b01fa9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}